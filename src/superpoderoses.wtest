import superpoderoses.*

describe "Superpoderoses" {
	
	/* ACLARACIÓN 
	 * El test asume todos los objetos como instancias de clases. 
	 * Si el diseño de la solución utiliza objetos bien conocidos en algunos casos entonces 
	 * se debe remover la declaración de la variable y la línea en que se sugiere la instanciación.
	 */

	const altaVelocidad= new Velocidad(rapidez = 2)
	const superVelocidad= new Velocidad(rapidez = 3)
	const vueloRasante= new Vuelo(alturaMaxima = 10, energiaParaDespegue = 10)
	const vueloAlto=new Vuelo(alturaMaxima =300, energiaParaDespegue = 200)
	const vueloRasanteAmplificado=new PoderAmplificador(poderBase =vueloRasante, amplificador = 4)
	const superVelocidadAmplificada=new  PoderAmplificador(poderBase = superVelocidad , amplificador = 3)
	
	const capitanaPatriaGrande= new Personaje(estrategia = 3, espiritualidad = 5)
	const plusvaliaCero= new Personaje(estrategia = 2, espiritualidad = 4)
	const usinaDeDerechos= new Personaje(estrategia = 1, espiritualidad = 6)
	
	const cooperativaJusticiera= new Equipo()
	
	const peligroSencillo=new Peligro(capacidadDebatalla = 30, desechosRadiactivos = false)
	const peligroSencilloRadiactivo = new Peligro(capacidadDebatalla = 30, desechosRadiactivos = true)
	const peligroModerado=new Peligro(capacidadDebatalla = 50, desechosRadiactivos = false)
	const peligroAlto= new Peligro(capacidadDebatalla = 400, desechosRadiactivos = true)
	/* 
	const fragmentadorMonopolios
	const educadorPublico
*/
 /*
	fixture {
		// Punto 1
		// Poderes
		altaVelocidad = null // TODO: constrir/obtener un poder de velocidad con rapidez = 2
		superVelocidad = null // TODO: constrir/obtener un poder de velocidad con rapidez = 3
		vueloRasante = null // TODO: constrir/obtener un poder de vuelo con altura maxima = 10 y energia para despegue = 10
		vueloAlto = null // TODO: constrir/obtener un poder de vuelo con altura maxima = 300 y energia para despegue = 200
		vueloRasanteAmplificado = null // TODO: constrir/obtener un poder amplificador con poder base = vueloRasante y amplificador = 4
		superVelocidadAmplificada = null // TODO: constrir/obtener un poder amplificador con poder base = superVelocidad y amplificador = 3
	
		// Personajes 
		capitanaPatriaGrande.agregarPoderes([superVelocidadAmplificada,vueloAlto])// TODO: constrir/obtener un personaje con estrategia = 3, espiritualidad = 5 y poderes = superVelocidadAmplificada y vueloAlto
		plusvaliaCero.agregarPoderes(altaVelocidad,vueloRasanteAmplificado])// TODO: constrir/obtener un personaje con estrategia = 2, espiritualidad = 4 y poderes = altaVelocidad y vueloRasanteAmplificado
		usinaDeDerechos.agregarPoderes([vueloRasante])// TODO: constrir/obtener un personaje con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
		
		// Punto 2
		// Equipo 
		cooperativaJusticiera = null // TODO: constrir/obtener un conformado por capitanaPatriaGrande, plusvaliaCero y usinaDeDerechos
		
		// Punto 3 
		// Peligros
		peligroSencillo = null // TODO: constrir/obtener un peligro con capacidad de batalla = 30 y NO tiene desechos radiactivos  
		peligroSencilloRadiactivo = null // TODO: constrir/obtener un peligro con capacidad de batalla = 30 y tiene desechos radiactivos
		peligroModerado = null // TODO: constrir/obtener un peligro con capacidad de batalla = 50 y NO tiene desechos radiactivos
		peligroAlto = null // TODO: constrir/obtener un peligro con capacidad de batalla = 400 y tiene desechos radiactivos

        // Punto 4
        // TODO: agregar al peligroSencillo nivel de complejidad = 1 y cantidad de personajes que se banca en simultaneo = 2
        // TODO: agregar al peligroSencilloRadiactivo nivel de complejidad = 1 y cantidad de personajes que se banca en simultaneo = 2
        // TODO: agregar al peligroModerado nivel de complejidad = 2 y cantidad de personajes que se banca en simultaneo = 1
        // TODO: agregar al peligroAlto nivel de complejidad = 3 y cantidad de personajes que se banca en simultaneo = 2
        

		// Punto 5 
		fragmentadorMonopolios = null // TODO: constrir/obtener un Metahumano con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
		educadorPublico = null // TODO: constrir/obtener un Mago con poder acumulado = 12, estrategia = 1, espiritualidad = 6 y poderes = vueloRasante	
	}
	*/
	
	/* ACLARACIÓN
	 * Los tests están comentados para evitar errores y warnings, así poder ir incorporándolos 
	 * a medida que se avanza con la solución del ejercicio
	 */
	

	test "punto 1.1 capacidad de batalla que aporta un poder" {
		
		// TODO: Verificar que la capacidad de batalla que le aporta superVelocidadAmplificada a capitanaPatriaGrande es 576
		assert.equals(576,superVelocidadAmplificada.capacidadBatalla(capitanaPatriaGrande))
		// TODO: Verificar que la capacidad de batalla que le aporta vueloAlto a capitanaPatriaGrande es 876
		assert.equals(876,vueloAlto.capacidadBatalla(capitanaPatriaGrande))
		// TODO: Verificar que la capacidad de batalla que le aporta altaVelocidad a plusvaliaCero es 72
		assert.equals(72,altaVelocidad.capacidadBatalla(plusvaliaCero))
		// TODO: Verificar que la capacidad de batalla que le aporta vueloRasanteAmplificado a plusvaliaCero es 144
		assert.equals(144,vueloRasanteAmplificado.capacidadBatalla(plusvaliaCero))
		// TODO: Verificar que la capacidad de batalla que le aporta vueloRasante a usinaDeDerechos es 49
		assert.equals(49,vueloRasante.capacidadBatalla(usinaDeDerechos))
	}
 	


	test "punto 1.2 capacidad de batalla de un personaje" {
		capitanaPatriaGrande.agregarPoder(superVelocidadAmplificada)
		capitanaPatriaGrande.agregarPoder(vueloAlto)// TODO: constrir/obtener un personaje con estrategia = 3, espiritualidad = 5 y poderes = superVelocidadAmplificada y vueloAlto
		plusvaliaCero.agregarPoder(altaVelocidad)
		plusvaliaCero.agregarPoder(vueloRasanteAmplificado)// TODO: constrir/obtener un personaje con estrategia = 2, espiritualidad = 4 y poderes = altaVelocidad y vueloRasanteAmplificado
		usinaDeDerechos.agregarPoder(vueloRasante)// TODO: constrir/obtener un personaje con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
			
		// TODO: Verificar que la capacidad de batalla de capitanaPatriaGrande es 1452
		assert.equals(1452, capitanaPatriaGrande.capacidadBatalla())
		
		// TODO: Verificar que la capacidad de batalla de plusvaliaCero es 216
		assert.equals(216, plusvaliaCero.capacidadBatalla())
		// TODO: Verificar que la capacidad de batalla de usinaDeDerechos es 49
		assert.equals(49, usinaDeDerechos.capacidadBatalla())
	}
 


	test "punto 2.1 Saber el miembro vulnerable de un equipo" {
		//cooperativaJusticiera.agregarPersonajes([capitanaPatriaGrande,plusvaliaCero,usinaDeDerechos])
		capitanaPatriaGrande.agregarPoder(superVelocidadAmplificada)
		capitanaPatriaGrande.agregarPoder(vueloAlto)// TODO: constrir/obtener un personaje con estrategia = 3, espiritualidad = 5 y poderes = superVelocidadAmplificada y vueloAlto
		plusvaliaCero.agregarPoder(altaVelocidad)
		plusvaliaCero.agregarPoder(vueloRasanteAmplificado)// TODO: constrir/obtener un personaje con estrategia = 2, espiritualidad = 4 y poderes = altaVelocidad y vueloRasanteAmplificado
		usinaDeDerechos.agregarPoder(vueloRasante)// TODO: constrir/obtener un personaje con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
			
		cooperativaJusticiera.agregarPersonajes(capitanaPatriaGrande)
		cooperativaJusticiera.agregarPersonajes(plusvaliaCero)
		cooperativaJusticiera.agregarPersonajes(usinaDeDerechos)
		assert.equals([capitanaPatriaGrande,plusvaliaCero,usinaDeDerechos], cooperativaJusticiera.personajes())
		// TODO: Verificar que miembro mas vulnerable de cooperativaJusticiera es usinaDeDerechos
		assert.equals(usinaDeDerechos, cooperativaJusticiera.masVuelnerable())
	}
 	


	test "punto 2.2 Saber la calidad de un equipo" {
		capitanaPatriaGrande.agregarPoder(superVelocidadAmplificada)
		capitanaPatriaGrande.agregarPoder(vueloAlto)// TODO: constrir/obtener un personaje con estrategia = 3, espiritualidad = 5 y poderes = superVelocidadAmplificada y vueloAlto
		plusvaliaCero.agregarPoder(altaVelocidad)
		plusvaliaCero.agregarPoder(vueloRasanteAmplificado)// TODO: constrir/obtener un personaje con estrategia = 2, espiritualidad = 4 y poderes = altaVelocidad y vueloRasanteAmplificado
		usinaDeDerechos.agregarPoder(vueloRasante)// TODO: constrir/obtener un personaje con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
			
		// TODO: Verificar que la calidad de cooperativaJusticiera es 572.33333
		cooperativaJusticiera.agregarPersonajes(capitanaPatriaGrande)
		cooperativaJusticiera.agregarPersonajes(plusvaliaCero)
		cooperativaJusticiera.agregarPersonajes(usinaDeDerechos)
		assert.equals(572.33333, cooperativaJusticiera.calidad())		
	}
 	


	test "punto 2.3 Saber los mejores poderes de un equipo" {
		capitanaPatriaGrande.agregarPoder(superVelocidadAmplificada)
		capitanaPatriaGrande.agregarPoder(vueloAlto)// TODO: constrir/obtener un personaje con estrategia = 3, espiritualidad = 5 y poderes = superVelocidadAmplificada y vueloAlto
		plusvaliaCero.agregarPoder(altaVelocidad)
		plusvaliaCero.agregarPoder(vueloRasanteAmplificado)// TODO: constrir/obtener un personaje con estrategia = 2, espiritualidad = 4 y poderes = altaVelocidad y vueloRasanteAmplificado
		usinaDeDerechos.agregarPoder(vueloRasante)// TODO: constrir/obtener un personaje con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
		cooperativaJusticiera.agregarPersonajes(capitanaPatriaGrande)
		cooperativaJusticiera.agregarPersonajes(plusvaliaCero)
		cooperativaJusticiera.agregarPersonajes(usinaDeDerechos)
		// TODO: Verificar que los mejores poderes de cooperativaJusticiera son vueloAlto, vueloRasanteAmplificado y vueloRasante
		assert.equals([vueloAlto,vueloRasanteAmplificado,vueloRasante], cooperativaJusticiera.mejoresPoderes())	
	}
	
	

	test "punto 3.1 personajes contra el peligro" {
		capitanaPatriaGrande.agregarPoder(superVelocidadAmplificada)
		capitanaPatriaGrande.agregarPoder(vueloAlto)// TODO: constrir/obtener un personaje con estrategia = 3, espiritualidad = 5 y poderes = superVelocidadAmplificada y vueloAlto
		plusvaliaCero.agregarPoder(altaVelocidad)
		plusvaliaCero.agregarPoder(vueloRasanteAmplificado)// TODO: constrir/obtener un personaje con estrategia = 2, espiritualidad = 4 y poderes = altaVelocidad y vueloRasanteAmplificado
		usinaDeDerechos.agregarPoder(vueloRasante)// TODO: constrir/obtener un personaje con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
		// TODO: Verificar que peligroSencillo puede ser afrontado por capitanaPatriaGrande
		assert.that(capitanaPatriaGrande.superaPeligro(peligroSencillo))
		// TODO: Verificar que peligroSencillo puede ser afrontado por plusvaliaCero
		assert.that(plusvaliaCero.superaPeligro(peligroSencillo))
		// TODO: Verificar que peligroSencillo puede ser afrontado por usinaDeDerechos
		assert.that(usinaDeDerechos.superaPeligro(peligroSencillo))
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por capitanaPatriaGrande
		assert.that(capitanaPatriaGrande.superaPeligro(peligroSencilloRadiactivo))
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por plusvaliaCero
			//assert.notThat(usinaDeDerechos.superaPeligro(peligroSencilloRadiactivo))
		// TODO: Verificar que peligroSencilloRadiactivo NO puede ser afrontado por usinaDeDerechos
		assert.that(usinaDeDerechos.superaPeligro(peligroSencilloRadiactivo))
		// TODO: Verificar que peligroModerado puede ser afrontado por capitanaPatriaGrande
			assert.that(capitanaPatriaGrande.superaPeligro(peligroModerado))
		// TODO: Verificar que peligroModerado puede ser afrontado por plusvaliaCero
			assert.that(plusvaliaCero.superaPeligro(peligroModerado))
		// TODO: Verificar que peligroModerado NO puede ser afrontado por usinaDeDerechos
			assert.notThat(usinaDeDerechos.superaPeligro(peligroModerado))
		// TODO: Verificar que peligroAlto puede ser afrontado por capitanaPatriaGrande
			assert.that(capitanaPatriaGrande.superaPeligro(peligroAlto))
		// TODO: Verificar que peligroAlto NO puede ser afrontado por plusvaliaCero
			assert.notThat(plusvaliaCero.superaPeligro(peligroAlto))
		// TODO: Verificar que peligroAlto NO puede ser afrontado por usinaDeDerechos
			assert.notThat(usinaDeDerechos.superaPeligro(peligroAlto))
	}

	

	test "punto 3.2 Saber si un peligro es sensato " {
		capitanaPatriaGrande.agregarPoder(superVelocidadAmplificada)
		capitanaPatriaGrande.agregarPoder(vueloAlto)// TODO: constrir/obtener un personaje con estrategia = 3, espiritualidad = 5 y poderes = superVelocidadAmplificada y vueloAlto
		plusvaliaCero.agregarPoder(altaVelocidad)
		plusvaliaCero.agregarPoder(vueloRasanteAmplificado)// TODO: constrir/obtener un personaje con estrategia = 2, espiritualidad = 4 y poderes = altaVelocidad y vueloRasanteAmplificado
		usinaDeDerechos.agregarPoder(vueloRasante)// TODO: constrir/obtener un personaje con estrategia = 1, espiritualidad = 6 y poderes = vueloRasante
		// TODO: Verificar que peligroSencillo es sensato para cooperativaJusticiera
			assert.that(cooperativaJusticiera. peligroSensato(peligroSencillo))
		// TODO: Verificar que peligroSencilloRadiactivo NO es sensato para cooperativaJusticiera
			assert.notThat(cooperativaJusticiera.peligroSensato(peligroSencilloRadiactivo))
		// TODO: Verificar que peligroModerado NO es sensato para cooperativaJusticiera
			assert.notThat(cooperativaJusticiera.peligroSensato(peligroModerado))
		// TODO: Verificar que peligroAlto NO es sensato para cooperativaJusticiera
			assert.notThat(cooperativaJusticiera.peligroSensato(peligroAlto))
	}
 	
	

	test "punto 4.1 Afrontar peligro individualmente: OK" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroSencillo 
		
		// TODO: Verificar que la estrategia de usinaDeDerechos es 2
	}


/*
	test "punto 4.1 Afrontar peligro individualmente: no OK por radioactividad" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroSencilloRadiactivo (NO SE PUEDE!)
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
	}
 */
	
/*
	test "punto 4.1 Afrontar peligro individualmente: no OK por capacidad de batalla" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroModerado (NO SE PUEDE!)
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
	}
 */
	
/*
	test "punto 4.2  Afrontar peligro (moderado) en equipo  " {
		// TODO: Hacer que cooperativaJusticiera afronte a peligroModerado
		// TODO: Verificar que la estrategia de capitanaPatriaGrande es 5
		// TODO: Verificar que la estrategia de plusvaliaCero es 4
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1		
	}
 */

/*
	test "punto 4.2  Afrontar peligro (alto) en equipo (no ok)" {
		// TODO: Hacer que cooperativaJusticiera afronte a peligroAlto (NO SE PUEDE!)
		// TODO: Verificar que la estrategia de capitanaPatriaGrande es 3
		// TODO: Verificar que la estrategia de plusvaliaCero es 2
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
	}
 */	

/*
	test "punto 5.1  Metahumano " {
		// TODO: Verificar que la capacidad de batalla de fragmentadorMonopolios es 98
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por fragmentadorMonopolios
		// TODO: Hacer que fragmentadorMonopolios afronte a peligroSencilloRadiactivo
		// TODO: Verificar que la estrategia de fragmentadorMonopolios es 2
		// TODO: Verificar que la espiritualidad de fragmentadorMonopolios es 7
		// TODO: Verificar que peligroAlto NO puede ser afrontado por fragmentadorMonopolios
		// TODO: Hacer que fragmentadorMonopolios afronte a peligroAlto (NO SE PUEDE!)
	}
 */

/*
	test "punto 5.2  Mago " {
		// TODO: Verificar que la capacidad de batalla de educadorPublico es 110
		// TODO: Verificar que peligroAlto NO puede ser afrontado por educadorPublico
		// TODO: Hacer que educadorPublico afronte a peligroAlto (NO SE PUEDE!)

		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por educadorPublico
		// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		// TODO: Verificar que la estrategia de educadorPublico es 2
		// TODO: Verificar que la espiritualidad de educadorPublico es 7
		// TODO: Verificar que el poder acumulado de educadorPublico es 7
		
		// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		// TODO: Verificar que la estrategia de educadorPublico es 2
		// TODO: Verificar que la espiritualidad de educadorPublico es 7
		// TODO: Verificar que el poder acumulado de educadorPublico es 2
	}
 */
}
